*, ::before, ::after
{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
.grid-container
{
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px,1fr));
    gap: 50px;
    & article
    {
        border: 2px solid black;
        border-radius: 5px;
        /* En ajoutant la propriété "container-type" 
        l'élément devient un container, par ce fait, il devient incapable d'adapter sa taille à
        son contenu.
        Il doit avoir une taille fixé ou au moins dépandante d'un contexte comme flex ou grid 
        
        normal (ne'est pas un query container)
        size ( est ub query container)
        inline-size (est un query container uniquement sur l'axe inline(par défault horizental))
        */
        container-type: inline-size;
        /* min-height: 60vh; */
        /* 
         Optionnellement, on pourra ajouter un nom à notre container, qui pourra etre utile plus tart
        */
        container-name: monsuperarticle;
    }
}
img
{
    /* Utiliser un container, débloque l'utilisation des unités "cqw" et "cqh" qui représentent un pourcentage de la largeur ou de la hateur du container */
    width:80cqw;
    display: block;
    margin: auto;
}
/* cette règle permet une media query dépendant non pas du viewport
   mais de la taille du container nommé */

@container monsuperarticle (min-width: 450px)
{
    img,p 
    {
        display: inline-block;
        width: 40cqw;
    }
}